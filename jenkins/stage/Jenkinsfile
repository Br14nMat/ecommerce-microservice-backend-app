pipeline {
    
    agent any

    tools {
        maven "MavenTool"
    }

    environment {
        RESOURCE_GROUP = "taller2"
        AKS_NAME = "taller2brian"
        NAMESPACE = "stage"
        SERVICE = 'product-service'
    }

    stages {
        stage("Checkout git") {
            steps {
                checkout scmGit(
                    branches: [[name: '*/master']], 
                    extensions: [], 
                    userRemoteConfigs: [[url: 'https://github.com/Br14nMat/ecommerce-microservice-backend-app']]
                )
            }
        }

        
        stage("Run Unit and Integration Tests") {
            steps {
                dir("${SERVICE}") {
                    sh 'mvn test'
                }
            }
        }


        stage("Build Product Service") {
            steps {
                dir("${SERVICE}") {
                    sh 'mvn clean install -DskipTests' 
                }
            }
        }
        

        stage('Set subscription') {
            steps {
                withCredentials([string(credentialsId: 'AZURE_SUBSCRIPTION_ID', variable: 'SUBSCRIPTION_ID')]) {
                    sh '''
                        az account set --subscription $SUBSCRIPTION_ID
                    '''
                }
            }
        }

        stage('Kubelogin step') {
            steps {
                sh '''
                    az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_NAME --overwrite-existing
                    kubelogin convert-kubeconfig -l azurecli
                '''
            }
        }

        stage('Deploy core services'){

            steps {
                sh '''

                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/zipkin-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=zipkin --timeout=300s


                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/cloud-config-container-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=cloud-config-container --timeout=300s

                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/service-discovery-container-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=service-discovery-container --timeout=300s

                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/api-gateway-container-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=api-gateway-container --timeout=300s

                '''
            }

        }

        stage('Desplegar manifiestos') {
            steps {
                sh '''
                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/$SERVICE-container-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=$SERVICE-container --timeout=200s
                '''
            }
        }

    
        stage('Port Forward') {
            steps {
                script {
                    sh '''
                        kubectl port-forward service/${SERVICE}-container 8500:8500 -n ${NAMESPACE} &
                        echo $! > portforward.pid
                        sleep 10  # Espera unos segundos para que estÃ© disponible
                    '''
                }
            }
        }
        

        stage('Run E2E Tests') {
            steps {
                sh '''
                    newman run e2e/e2e-product-service.json
                '''
            }
        }

        stage('Locust') {
            steps {
                sh '''

                    locust -f locust/locustfile.py \
                    --host=http://localhost:8500/product-service \
                    --users=10 \
                    --spawn-rate=2 \
                    --run-time=1m \
                    --headless \
                    --csv=locust/locust_output/locust_results \
                    --html=locust/locust_output/locust_report.html
                '''
            }
        }


        stage('Cleanup Port Forward') {
            steps {
                sh '''
                    kill $(cat portforward.pid) || true
                    rm -f portforward.pid
                '''
            }
        }

        stage('Generate Release Notes') {
                steps {
                    script {

                        def version = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                        def date = sh(script: "date '+%Y-%m-%d %H:%M:%S'", returnStdout: true).trim()
                        def commitLogs = sh(script: "git log -5 --pretty=format:'- %s (%an)'", returnStdout: true).trim()

                        def releaseNotes = """
                            # Release Notes - ${version}

                            **Fecha y hora:** ${date}  
                            **Ambiente:** ${NAMESPACE}  
                            **Servicio:** ${SERVICE}  

                            ## âœ… Cambios recientes
                            ${commitLogs}

                            ## ðŸ§ª Resultados esperados
                            - Pruebas unitarias e integradas: âœ… OK
                            - Pruebas E2E: âœ… OK (ver Newman report)
                            - Pruebas de carga Locust: âœ… OK  
                            - Archivos: locust_output/locust_results_*.csv

                            ## ðŸ“Ž Referencia
                            - Build: #${env.BUILD_NUMBER}
                            - Commit: ${version}
                            - Branch: master
                            """
                        writeFile file: "release_notes/release-${version}.md", text: releaseNotes
                    }
                }
        }
   

    }
}
