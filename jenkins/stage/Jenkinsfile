pipeline {
    
    agent any

    tools {
        maven "MavenTool"
    }

    environment {
        RESOURCE_GROUP = "taller2"
        AKS_NAME = "taller2brian"
        NAMESPACE = "stage"
    }

    stages {
        stage("Checkout git") {
            steps {
                checkout scmGit(
                    branches: [[name: '*/master']], 
                    extensions: [], 
                    userRemoteConfigs: [[url: 'https://github.com/Br14nMat/ecommerce-microservice-backend-app']]
                )
            }
        }

        
        stage("Run Unit and Integration Tests") {
            steps {

                dir('product-service') {
                    sh 'mvn test'
                }

                dir('payment-service') {
                    sh 'mvn test'
                }
            }
        }
        

        stage('Set subscription') {
            steps {
                withCredentials([string(credentialsId: 'AZURE_SUBSCRIPTION_ID', variable: 'SUBSCRIPTION_ID')]) {
                    sh '''
                        az account set --subscription $SUBSCRIPTION_ID
                    '''
                }
            }
        }

        stage('Kubelogin step') {
            steps {
                sh '''
                    az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_NAME --overwrite-existing
                    kubelogin convert-kubeconfig -l azurecli
                '''
            }
        }

        stage('Deploy core services'){

            steps {
                sh '''

                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/zipkin-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=zipkin --timeout=300s

                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/cloud-config-container-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=cloud-config-container --timeout=300s

                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/service-discovery-container-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=service-discovery-container --timeout=300s

                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/api-gateway-container-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=api-gateway-container --timeout=300s

                '''
            }

        }

        stage('Deploy remaining services') {
            steps {
                sh '''
                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/product-service-container-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=product-service-container --timeout=300s

                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/payment-service-container-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=payment-service-container --timeout=300s

                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/order-service-container-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=order-service-container --timeout=300s

                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/user-service-container-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=user-service-container --timeout=300s

                '''
            }
        }


        stage('Port Forward Multiple Services') {
            steps {
                script {
                    sh '''
                        # Port forward Product Service
                        kubectl port-forward service/product-service-container 8500:8500 -n ${NAMESPACE} &
                        echo $! > portforward-product.pid

                        # Port forward Order Service
                        kubectl port-forward service/order-service-container 8300:8300 -n ${NAMESPACE} &
                        echo $! > portforward-order.pid

                        # Port forward User Service
                        kubectl port-forward service/user-service-container 8700:8700 -n ${NAMESPACE} &
                        echo $! > portforward-user.pid

                        # Espera unos segundos a que todos los port forwards est√©n listos
                        sleep 10
                    '''
                }
            }
        }

        stage('Run E2E Tests') {
            steps {
                sh '''
                    newman run e2e/e2e-product-service.json

                    newman run e2e/e2e-user-service.json

                    newman run e2e/e2e-order-service.json
                '''
            }
        }


        stage('Stop Port Forwards') {
            steps {
                script {
                    sh '''
                        kill $(cat portforward-product.pid) || true
                        kill $(cat portforward-order.pid) || true
                        kill $(cat portforward-user.pid) || true
                    '''
                }
            }
        }


    }
}
