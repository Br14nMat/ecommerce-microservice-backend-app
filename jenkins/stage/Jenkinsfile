pipeline {
    
    agent any

    tools {
        maven "MavenTool"
    }

    environment {
        RESOURCE_GROUP = "taller2"
        AKS_NAME = "taller2brian"
        NAMESPACE = "stage"
        TRIVY_CACHE = "C:/Users/Windows/.trivy-cache-backup"
        SERVICES = "api-gateway favourite-service order-service payment-service product-service proxy-client shipping-service user-service"
        REGISTRY = "br14nmat"
        TAG = "latest"
    }

    stages {
        stage("Checkout git") {
            steps {
                checkout scmGit(
                    branches: [[name: '*/master']], 
                    extensions: [], 
                    userRemoteConfigs: [[url: 'https://github.com/Br14nMat/ecommerce-microservice-backend-app']]
                )
            }
        }
        
        stage("Run Unit and Integration Tests") {
            steps {

                dir('product-service') {
                    sh 'mvn clean verify'
                }

                dir('payment-service') {
                    sh 'mvn clean verify'
                }
            }
        }
        
        
        stage('Archive JaCoCo Reports') {
            steps {
                script {
                    sh 'mkdir -p coverage-reports/product-service'
                    sh 'mkdir -p coverage-reports/payment-service'

                    sh 'cp -r product-service/target/site/jacoco/* coverage-reports/product-service/'
                    sh 'cp -r payment-service/target/site/jacoco/* coverage-reports/payment-service/'
                }

                archiveArtifacts artifacts: 'coverage-reports/**/*.html', fingerprint: true
            }
        }

        stage('Scan with Trivy') {
            steps {
                script {
                    for (service in env.SERVICES.tokenize()) {
                        def image = "${env.REGISTRY}/${service}:${env.TAG}"
                        def safeName = service.replaceAll("[^a-zA-Z0-9_-]", "_") // Para nombres de archivos v√°lidos
                        echo "Escaneando imagen ${image} con Trivy (generando reportes)"
                        sh """
                            mkdir -p trivy-reports
                            mkdir -p trivy-reports/txt
                            mkdir -p trivy-reports/json

                            trivy image \
                                --cache-dir ${env.TRIVY_CACHE} \
                                --timeout 10m \
                                --skip-db-update \
                                --skip-java-db-update \
                                --exit-code 0 \
                                --severity CRITICAL \
                                ${image} > trivy-reports/txt/${safeName}_report.txt
                            
                            trivy image \
                                --cache-dir ${env.TRIVY_CACHE} \
                                --timeout 10m \
                                --skip-db-update \
                                --skip-java-db-update \
                                --exit-code 0 \
                                --severity CRITICAL \
                                --format json \
                                --output trivy-reports/json/${safeName}_report.json \
                                ${image}
                
                        """
                    }
                }
            }
        }
        

        stage('Set subscription') {
            steps {
                withCredentials([string(credentialsId: 'AZURE_SUBSCRIPTION_ID', variable: 'SUBSCRIPTION_ID')]) {
                    sh '''
                        az account set --subscription $SUBSCRIPTION_ID
                    '''
                }
            }
        }

        stage('Kubelogin step') {
            steps {
                sh '''
                    az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_NAME --overwrite-existing
                    kubelogin convert-kubeconfig -l azurecli
                '''
            }
        }

        stage('Deploy core services'){

            steps {
                sh '''

                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/zipkin-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=zipkin --timeout=300s

                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/cloud-config-container-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=cloud-config --timeout=300s

                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/service-discovery-container-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=service-discovery --timeout=300s

                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/api-gateway-container-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=api-gateway --timeout=300s

                '''
            }

        }

        stage('Deploy remaining services') {
            steps {
                sh '''
                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/product-service-container-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=product-service --timeout=300s

                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/payment-service-container-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=payment-service --timeout=300s

                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/order-service-container-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=order-service --timeout=300s

                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/user-service-container-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=user-service --timeout=300s

                '''
            }
        }


        stage('Port Forward Multiple Services') {
            steps {
                script {
                    sh '''
                        # Port forward Product Service
                        kubectl port-forward service/product-service 8500:8500 -n ${NAMESPACE} &
                        echo $! > portforward-product.pid

                        # Port forward Order Service
                        kubectl port-forward service/order-service 8300:8300 -n ${NAMESPACE} &
                        echo $! > portforward-order.pid

                        # Port forward User Service
                        kubectl port-forward service/user-service 8700:8700 -n ${NAMESPACE} &
                        echo $! > portforward-user.pid

                        # Espera unos segundos a que todos los port forwards est√©n listos
                        sleep 10
                    '''
                }
            }
        }

        stage('Run E2E Tests') {
            steps {
                sh '''
                    newman run e2e/e2e-product-service.json

                    newman run e2e/e2e-user-service.json

                    newman run e2e/e2e-order-service.json
                '''
            }
        }


        stage('Stop Port Forwards') {
            steps {
                script {
                    sh '''
                        kill $(cat portforward-product.pid) || true
                        kill $(cat portforward-order.pid) || true
                        kill $(cat portforward-user.pid) || true
                    '''
                }
            }
        }


    }

    post {
    success {
        script {
            def successAttachment = [[
                text: "‚úÖ El pipeline de ${env.NAMESPACE} se ejecut√≥ correctamente.", 
                fallback: 'El pipeline fue exitoso.',
                color: '#36a64f'
            ]]
            def slackResponse = slackSend(channel: "#general-ingesoftv", attachments: successAttachment)
            
            slackUploadFile(
                filePath: "coverage-reports/product-service/index.html",
                channel: slackResponse.channelId,
                initialComment: "üìä Cobertura - Product Service"
            )

            slackUploadFile(
                filePath: "coverage-reports/payment-service/index.html",
                channel: slackResponse.channelId,
                initialComment: "üìä Cobertura - Payment Service"
            )

            sh '''
                tar -czf trivy-reports.tar.gz trivy-reports/
            '''

            slackUploadFile(
                filePath: "trivy-reports.tar.gz",
                channel: slackResponse.channelId,
                initialComment: "üõ°Ô∏è Reportes Trivy (vulnerabilidades)"
            )
        }
    }

    failure {
        script {
            def failureAttachment = [[
                text: "‚ùå El pipeline de ${env.NAMESPACE} fall√≥. Revisa los logs para m√°s detalles.", 
                fallback: 'El pipeline fall√≥.',
                color: '#ff0000'
            ]]
            slackSend(channel: "#general-ingesoftv", attachments: failureAttachment)
        }
    }
    }


}
