pipeline {
    
    agent any

    tools {
        maven "MavenTool"
    }

    environment {
        RESOURCE_GROUP = "taller2"
        AKS_NAME = "taller2brian"
        NAMESPACE = "prod"
        TRIVY_CACHE = "C:/Users/Windows/.trivy-cache-backup"
        SERVICES = "api-gateway favourite-service order-service payment-service product-service proxy-client shipping-service user-service"
        REGISTRY = "br14nmat"
        TAG = "latest"
    }

    stages {

        stage('Solicitar Aprobación para Producción') {
            steps {
                script {
                    def approvalAttachment = [[
                        text: "🚨 Se requiere aprobación para desplegar a *producción*.\n\nPresiona 'Aprobar' en Jenkins para continuar.",
                        fallback: "Aprobación requerida para despliegue.",
                        color: "#ffae42"
                    ]]

                    slackSend(channel: "#general-ingesoftv", attachments: approvalAttachment)

                    timeout(time: 15, unit: 'MINUTES') {
                        input message: "¿Aprobar despliegue a producción?", ok: "Aprobar"
                    }
                }
            }
        }

        stage("Checkout git") {
            steps {
                checkout scmGit(
                    branches: [[name: '*/master']], 
                    extensions: [], 
                    userRemoteConfigs: [[url: 'https://github.com/Br14nMat/ecommerce-microservice-backend-app']]
                )
            }
        }

        
        stage("Run Unit and Integration Tests") {
            steps {

                dir('product-service') {
                    sh 'mvn clean verify'
                }

                dir('payment-service') {
                    sh 'mvn clean verify'
                }
            }
        }

        stage('Archive JaCoCo Reports') {
            steps {
                script {
                    sh 'mkdir -p coverage-reports/product-service'
                    sh 'mkdir -p coverage-reports/payment-service'

                    sh 'cp -r product-service/target/site/jacoco/* coverage-reports/product-service/'
                    sh 'cp -r payment-service/target/site/jacoco/* coverage-reports/payment-service/'
                }

                archiveArtifacts artifacts: 'coverage-reports/**/*.html', fingerprint: true
            }
        }

        stage('Scan with Trivy') {
            steps {
                script {
                    for (service in env.SERVICES.tokenize()) {
                        def image = "${env.REGISTRY}/${service}:${env.TAG}"
                        def safeName = service.replaceAll("[^a-zA-Z0-9_-]", "_") // Para nombres de archivos válidos
                        echo "Escaneando imagen ${image} con Trivy (generando reportes)"
                        sh """
                            mkdir -p trivy-reports
                            mkdir -p trivy-reports/txt
                            mkdir -p trivy-reports/json

                            trivy image \
                                --cache-dir ${env.TRIVY_CACHE} \
                                --timeout 10m \
                                --skip-db-update \
                                --skip-java-db-update \
                                --exit-code 0 \
                                --severity CRITICAL \
                                ${image} > trivy-reports/txt/${safeName}_report.txt
                            
                            trivy image \
                                --cache-dir ${env.TRIVY_CACHE} \
                                --timeout 10m \
                                --skip-db-update \
                                --skip-java-db-update \
                                --exit-code 0 \
                                --severity CRITICAL \
                                --format json \
                                --output trivy-reports/json/${safeName}_report.json \
                                ${image}
                
                        """
                    }
                }
            }
        }
        

        stage('Set subscription') {
            steps {
                withCredentials([string(credentialsId: 'AZURE_SUBSCRIPTION_ID', variable: 'SUBSCRIPTION_ID')]) {
                    sh '''
                        az account set --subscription $SUBSCRIPTION_ID
                    '''
                }
            }
        }

        stage('Kubelogin step') {
            steps {
                sh '''
                    az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_NAME --overwrite-existing
                    kubelogin convert-kubeconfig -l azurecli
                '''
            }
        }

        stage('Deploy core services'){

            steps {
                sh '''

                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/zipkin-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=zipkin --timeout=300s

                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/cloud-config-container-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=cloud-config --timeout=300s

                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/service-discovery-container-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=service-discovery --timeout=300s

                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/api-gateway-container-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=api-gateway --timeout=300s

                '''
            }

        }

        stage('Deploy remaining services') {
            steps {
                sh '''
                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/product-service-container-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=product-service --timeout=300s

                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/payment-service-container-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=payment-service --timeout=300s

                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/order-service-container-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=order-service --timeout=300s

                    kubectl apply -n $NAMESPACE -f k8s/$NAMESPACE/user-service-container-deployment.yaml
                    kubectl wait -n $NAMESPACE --for=condition=ready pod -l io.kompose.service=user-service --timeout=300s

                '''
            }
        }

        stage('Deploy Service Monitors') {
            steps {
                script {
                    sh '''
                        kubectl apply -f k8s/monitor/ -n monitoring
                    '''
                }
            }
        }



        stage('Port Forward Multiple Services') {
            steps {
                script {
                    sh '''
                        # Port forward Product Service
                        kubectl port-forward service/product-service 8500:8500 -n ${NAMESPACE} &
                        echo $! > portforward-product.pid

                        # Port forward Order Service
                        kubectl port-forward service/order-service 8300:8300 -n ${NAMESPACE} &
                        echo $! > portforward-order.pid

                        # Port forward User Service
                        kubectl port-forward service/user-service 8700:8700 -n ${NAMESPACE} &
                        echo $! > portforward-user.pid

                        # Espera unos segundos a que todos los port forwards estén listos
                        sleep 10
                    '''
                }
            }
        }

        stage('Run E2E Tests') {
            steps {
                sh '''
                    newman run e2e/e2e-product-service.json

                    newman run e2e/e2e-user-service.json

                    newman run e2e/e2e-order-service.json
                '''
            }
        }


        stage('Locust Tests') {
            steps {
                sh '''
                    
                    mkdir -p locust/locust_output/product
                    
                    locust -f locust/locustfile-product.py \
                    --host=http://localhost:8500/product-service \
                    --users=10 \
                    --spawn-rate=2 \
                    --run-time=1m \
                    --headless \
                    --html=locust/locust_output/product/locust_report.html


                    mkdir -p locust/locust_output/order
                    
                    locust -f locust/locustfile-order.py \
                    --host=http://localhost:8300/order-service \
                    --users=10 \
                    --spawn-rate=2 \
                    --run-time=1m \
                    --headless \
                    --html=locust/locust_output/order/locust_report.html


                    mkdir -p locust/locust_output/user
                    
                    locust -f locust/locustfile-user.py \
                    --host=http://localhost:8700/user-service \
                    --users=10 \
                    --spawn-rate=2 \
                    --run-time=1m \
                    --headless \
                    --html=locust/locust_output/user/locust_report.html
                    
                '''
            }
            
        }

        stage('DAST - OWASP ZAP Baseline Scan') {
          steps {
            script {
                def gatewayHost = sh(script: "kubectl get svc api-gateway -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}'", returnStdout: true).trim()
                echo "API Gateway is available at: http://${gatewayHost}:8080"
                def zapReportsPath = "${env.WORKSPACE.replace('\\', '/')}/zap_reports"

                echo "Iniciando escaneo OWASP ZAP..."
                sh """
                    mkdir -p "${zapReportsPath}"
            
                    docker pull ghcr.io/zaproxy/zaproxy:stable
            
                    docker run --rm \
                      -v "${zapReportsPath}:/zap/wrk:rw" \
                      ghcr.io/zaproxy/zaproxy:stable \
                      zap-baseline.py \
                        -t http://${gatewayHost}:8080 \
                        -r zap_report.html \
                        -x zap_report.xml \
                        -I
                     """

            }
            archiveArtifacts artifacts: 'zap_reports/*.html, zap_reports/*.xml', fingerprint: true
          }
        }


        stage('Stop Port Forwards') {
            steps {
                script {
                    sh '''
                        kill $(cat portforward-product.pid) || true
                        kill $(cat portforward-order.pid) || true
                        kill $(cat portforward-user.pid) || true
                    '''
                }
            }
        }


        stage('Determine Next Semantic Version') {
            steps {
                script {
                    // Extraer última versión tag
                    def lastTag = sh(script: "git describe --tags --abbrev=0 || echo 0.0.0", returnStdout: true).trim()

                    // Remover prefijo 'v' si existe
                    lastTag = lastTag.replaceFirst("^v", "")

                    def major = 0, minor = 0, patch = 0
                    def parts = lastTag.tokenize('.')

                    if (parts.size() == 3 && parts.every { it.isInteger() }) {
                        (major, minor, patch) = parts.collect { it.toInteger() }
                    } else {
                        echo "WARNING: El último tag '${lastTag}' no tiene formato semántico. Se usará 0.0.0 por defecto."
                    }

                    // Obtener los commits desde el último tag (usar v${lastTag} si los tags están con prefijo)
                    def commitRange = "v${major}.${minor}.${patch}"
                    def commits = sh(script: "git log ${commitRange}..HEAD --pretty=%s || true", returnStdout: true).trim().split("\n")

                    def bump = "patch"
                    for (msg in commits) {
                        if (msg.startsWith("feat:")) {
                            bump = bump == "major" ? "major" : "minor"
                        }
                        if (msg.startsWith("BREAKING CHANGE") || msg.contains("!:")) {
                            bump = "major"
                        }
                    }

                    if (bump == "major") {
                        major++
                        minor = 0
                        patch = 0
                    } else if (bump == "minor") {
                        minor++
                        patch = 0
                    } else if (bump == "patch") {
                        patch++
                    }

                    def nextVersion = "${major}.${minor}.${patch}"

                    echo "Next version will be: ${nextVersion}"
                    env.NEXT_VERSION = nextVersion
                }
            }
        }


        stage('Generate Release Notes') {
            steps {
                script {
                    def date = sh(script: "date '+%Y-%m-%d %H:%M:%S'", returnStdout: true).trim()

                    // Usar el último tag existente como base
                    def lastTag = sh(script: "git describe --tags --abbrev=0 || echo 0.0.0", returnStdout: true).trim()
                    lastTag = lastTag.replaceFirst("^v", "") // por si tiene 'v'

                    def commitLogs = sh(
                        script: "git log v${lastTag}..HEAD --pretty=format:'- %s (%an)' || true",
                        returnStdout: true
                    ).trim()

                    sh 'mkdir -p release_notes'

                    def releaseNotes = """
                        # Release Notes - v${env.NEXT_VERSION}

                        **Fecha y hora:** ${date}  
                        **Ambiente:** ${NAMESPACE}  

                        ## ✅ Cambios recientes
                        ${commitLogs}

                        ## 🧪 Resultados esperados
                        - Pruebas unitarias e integradas: ✅ OK
                        - Pruebas E2E: ✅ OK 
                        - Pruebas de carga Locust: ✅ OK (ver reportes HTML) 
                            - Archivos: locust_output/*/locust_report.html

                        ## 📎 Referencia
                        - Build: #${env.BUILD_NUMBER}
                        - Commit: ${env.GIT_COMMIT}
                        - Versión: v${env.NEXT_VERSION}
                        - Branch: master
                    """
                    writeFile file: "release_notes/release-v${env.NEXT_VERSION}.md", text: releaseNotes
                }
            }
        }

        stage('Tag Release in Git') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
                    script {
                        sh '''
                            git config user.email "ci-bot@example.com"
                            git config user.name "CI Bot"
                            git tag -a v$NEXT_VERSION -m "Release v$NEXT_VERSION"
                            git push https://$GIT_USER:$GIT_TOKEN@github.com/Br14nMat/ecommerce-microservice-backend-app.git v$NEXT_VERSION

                        '''

                        createGitHubRelease(
                            credentialId: 'github-token',
                            repository: 'Br14nMat/ecommerce-microservice-backend-app',
                            tag: "v${env.NEXT_VERSION}",
                            commitish: 'master',
                            bodyFile: "release_notes/release-v${env.NEXT_VERSION}.md",
                            draft: false,
                            prerelease: false
                        )
                    }
                }
            }
        }

    }

    post {
        success {
            script {
                def successAttachment = [[
                    text: "✅ El pipeline de ${env.NAMESPACE} se ejecutó correctamente.", 
                    fallback: 'El pipeline fue exitoso.',
                    color: '#36a64f'
                ]]
                def slackResponse = slackSend(channel: "#general-ingesoftv", attachments: successAttachment)

                def version = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                slackUploadFile(
                    filePath: "release_notes/release-${version}.md",
                    channel: slackResponse.channelId,
                    initialComment: "📝 Notas de la versión ${version}"
                )

                slackUploadFile(
                    filePath: "coverage-reports/product-service/index.html",
                    channel: slackResponse.channelId,
                    initialComment: "📊 Cobertura - Product Service"
                )

                slackUploadFile(
                    filePath: "coverage-reports/payment-service/index.html",
                    channel: slackResponse.channelId,
                    initialComment: "📊 Cobertura - Payment Service"
                )

                sh '''
                    tar -czf trivy-reports.tar.gz trivy-reports/
                '''
    
                slackUploadFile(
                    filePath: "trivy-reports.tar.gz",
                    channel: slackResponse.channelId,
                    initialComment: "🛡️ Reportes Trivy (vulnerabilidades)"
                )

                slackUploadFile(
                filePath: "locust/locust_output/product/locust_report.html",
                channel: slackResponse.channelId,
                initialComment: "🐜 Locust - Product Service"
                )

                slackUploadFile(
                    filePath: "locust/locust_output/order/locust_report.html",
                    channel: slackResponse.channelId,
                    initialComment: "🐜 Locust - Order Service"
                )

                slackUploadFile(
                    filePath: "locust/locust_output/user/locust_report.html",
                    channel: slackResponse.channelId,
                    initialComment: "🐜 Locust - User Service"
                )

                 slackUploadFile(
                    filePath: "zap_reports/zap_report.html",
                    channel: slackResponse.channelId,
                    initialComment: "🛡️ OWASP ZAP - Reporte HTML"
                )

            }
        }

        failure {
            script {
                def failureAttachment = [[
                    text: "❌ El pipeline de ${env.NAMESPACE} falló. Revisa los logs para más detalles.", 
                    fallback: 'El pipeline falló.',
                    color: '#ff0000'
                ]]
                slackSend(channel: "#general-ingesoftv", attachments: failureAttachment)
            }
        }
    }

}
