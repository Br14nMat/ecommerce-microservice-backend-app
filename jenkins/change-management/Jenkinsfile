pipeline {
    
    agent any

    tools {
        maven "MavenTool"
    }

    environment {
        RESOURCE_GROUP = "taller2"
        AKS_NAME = "taller2brian"
        NAMESPACE = "prod"
    }

    stages {
        stage("Checkout git") {
            steps {
                checkout scmGit(
                    branches: [[name: '*/master']], 
                    extensions: [], 
                    userRemoteConfigs: [[url: 'https://github.com/Br14nMat/ecommerce-microservice-backend-app']]
                )
            }
        }

        stage('Determine Next Semantic Version') {
            steps {
                script {
                    // Extraer Ãºltima versiÃ³n tag
                    def lastTag = sh(script: "git describe --tags --abbrev=0 || echo 0.0.0", returnStdout: true).trim()

                    // Remover prefijo 'v' si existe
                    lastTag = lastTag.replaceFirst("^v", "")

                    def major = 0, minor = 0, patch = 0
                    def parts = lastTag.tokenize('.')

                    if (parts.size() == 3 && parts.every { it.isInteger() }) {
                        (major, minor, patch) = parts.collect { it.toInteger() }
                    } else {
                        echo "WARNING: El Ãºltimo tag '${lastTag}' no tiene formato semÃ¡ntico. Se usarÃ¡ 0.0.0 por defecto."
                    }

                    // Obtener los commits desde el Ãºltimo tag (usar v${lastTag} si los tags estÃ¡n con prefijo)
                    def commitRange = "v${major}.${minor}.${patch}"
                    def commits = sh(script: "git log ${commitRange}..HEAD --pretty=%s || true", returnStdout: true).trim().split("\n")

                    def bump = "patch"
                    for (msg in commits) {
                        if (msg.startsWith("feat:")) {
                            bump = bump == "major" ? "major" : "minor"
                        }
                        if (msg.startsWith("BREAKING CHANGE") || msg.contains("!:")) {
                            bump = "major"
                        }
                    }

                    if (bump == "major") {
                        major++
                        minor = 0
                        patch = 0
                    } else if (bump == "minor") {
                        minor++
                        patch = 0
                    } else if (bump == "patch") {
                        patch++
                    }

                    def nextVersion = "${major}.${minor}.${patch}"

                    echo "Next version will be: ${nextVersion}"
                    env.NEXT_VERSION = nextVersion
                }
            }
        }


        stage('Generate Release Notes') {
            steps {
                script {
                    def date = sh(script: "date '+%Y-%m-%d %H:%M:%S'", returnStdout: true).trim()

                    // Usar el Ãºltimo tag existente como base
                    def lastTag = sh(script: "git describe --tags --abbrev=0 || echo 0.0.0", returnStdout: true).trim()
                    lastTag = lastTag.replaceFirst("^v", "") // por si tiene 'v'

                    def commitLogs = sh(
                        script: "git log v${lastTag}..HEAD --pretty=format:'- %s (%an)' || true",
                        returnStdout: true
                    ).trim()

                    sh 'mkdir -p release_notes'

                    def releaseNotes = """
                        # Release Notes - v${env.NEXT_VERSION}

                        **Fecha y hora:** ${date}  
                        **Ambiente:** ${NAMESPACE}  

                        ## âœ… Cambios recientes
                        ${commitLogs}

                        ## ðŸ§ª Resultados esperados
                        - Pruebas unitarias e integradas: âœ… OK
                        - Pruebas E2E: âœ… OK 
                        - Pruebas de carga Locust: âœ… OK (ver reportes HTML) 
                            - Archivos: locust_output/*/locust_report.html

                        ## ðŸ“Ž Referencia
                        - Build: #${env.BUILD_NUMBER}
                        - Commit: ${env.GIT_COMMIT}
                        - VersiÃ³n: v${env.NEXT_VERSION}
                        - Branch: master
                    """
                    writeFile file: "release_notes/release-v${env.NEXT_VERSION}.md", text: releaseNotes
                }
            }
        }

        stage('Tag Release in Git') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
                    script {
                        sh '''
                            git config user.email "ci-bot@example.com"
                            git config user.name "CI Bot"
                            git tag -a v$NEXT_VERSION -m "Release v$NEXT_VERSION"
                            git push https://$GIT_USER:$GIT_TOKEN@github.com/Br14nMat/ecommerce-microservice-backend-app.git v$NEXT_VERSION

                        '''

                        createGitHubRelease(
                            credentialId: 'github-token',
                            repository: 'Br14nMat/ecommerce-microservice-backend-app',
                            tag: "v${env.NEXT_VERSION}",
                            commitish: 'master',
                            bodyFile: "release_notes/release-v${env.NEXT_VERSION}.md",
                            draft: false,
                            prerelease: false
                        )
                    }
                }
            }
        }

 

    }
}